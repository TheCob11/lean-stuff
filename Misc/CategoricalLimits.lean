import Mathlib
open CategoryTheory

local notation:80 g " ‚äö " f:80 => CategoryStruct.comp f g
section Lim
variable {C I} [Category C] [Category I] (M: I ‚•§ C)
-- starting with the def from stacks
structure Lim where
  pt: C
  œÄ (i: I) : pt ‚ü∂ M.obj i
  natl {i i' : I} (œÜ: i ‚ü∂ i') : œÄ i' = M.map œÜ ‚äö œÄ i := by aesop_cat
  unique_fac {W: C} (q: (i: I) ‚Üí (W ‚ü∂ M.obj i)) (hq: ‚àÄ{i i'} (œÜ: i ‚ü∂ i'), q i' = M.map œÜ ‚äö q i) :
    ‚àÉ!q': W ‚ü∂ pt, ‚àÄi, (œÄ i ‚äö q') = q i := by aesop_cat
section LimProduct
example (X: Fin 2 ‚Üí Type _) : Lim (Discrete.functor X) where
  pt := X 0 √ó X 1
  œÄ
  | ‚ü®0‚ü©, ‚ü®x, _‚ü© => x
  | ‚ü®1‚ü©, ‚ü®_, x‚ü© => x
  natl := @fun ‚ü®i‚ü© ‚ü®i'‚ü© ‚ü®‚ü®(h: i = i')‚ü©‚ü© ‚Ü¶ h ‚ñ∏ rfl
  unique_fac q _ :=
  ‚ü® fun w ‚Ü¶ ‚ü®q ‚ü®0‚ü© w, q ‚ü®1‚ü© w‚ü©,
    fun | ‚ü®0‚ü© | ‚ü®1‚ü© => rfl,
    fun _ _ ‚Ü¶ by simp_all only [types_comp_apply, Eq.comm] ‚ü©

example (X: Œπ ‚Üí Type) : Lim (Discrete.functor X) where
  pt := ‚àÄi, X i
  œÄ | ‚ü®i‚ü©, f => f i
  natl := @fun ‚ü®i‚ü© ‚ü®i'‚ü© ‚ü®‚ü®(h: i = i')‚ü©‚ü© ‚Ü¶ h ‚ñ∏ rfl
  unique_fac q _ :=
  ‚ü® fun w i ‚Ü¶ q ‚ü®i‚ü© w,
    fun _ ‚Ü¶ rfl,
    fun _ _ ‚Ü¶ by simp_all only [types_comp_apply, Eq.comm] ‚ü©
end LimProduct
section ConeProduct
def prodCone (X: Œπ ‚Üí Type) : Limits.Cone (Discrete.functor X) where
  pt := ‚àÄi, X i
  œÄ := {
    app := fun ‚ü®i‚ü© f ‚Ü¶ f i
    naturality := fun ‚ü®i‚ü© ‚ü®i'‚ü© ‚ü®‚ü®(h: i = i')‚ü©‚ü© ‚Ü¶ by subst h; exact rfl
  }

example (X: Œπ ‚Üí Type) : Limits.IsLimit (prodCone X) where
  lift c x i := c.œÄ.app ‚ü®i‚ü© x
  fac _ _ := rfl
  uniq _ œÜ hœÜ := funext‚ÇÇ fun p i ‚Ü¶ congrArg (œÜ p i = ¬∑ p) (hœÜ ‚ü®i‚ü©).symm |>.mpr rfl
    -- by simp only [(hœÜ ‚ü®i‚ü©).symm]; exact rfl
end ConeProduct
section LimConeIso
example (s: Limits.Cone M) {i i' : I} (œÜ : i ‚ü∂ i') : s.œÄ.app i' = M.map œÜ ‚äö s.œÄ.app i :=
  Category.id_comp (s.œÄ.app _) |>.symm.trans <| s.œÄ.naturality œÜ

example (s: Limits.Cone M) {i i' : I} (œÜ : i ‚ü∂ i') : s.œÄ.app i' = M.map œÜ ‚äö s.œÄ.app i :=
  Category.id_comp (s.œÄ.app _) |>.symm.trans <| s.œÄ.naturality œÜ

variable {M}

def Lim.ofIsLimit {c: Limits.Cone M} (h: Limits.IsLimit c) : Lim M where
  pt := c.pt
  œÄ := fun i ‚Ü¶ c.œÄ.app i
  natl := (Category.id_comp (c.œÄ.app _) |>.symm.trans <| c.œÄ.naturality ¬∑)
  unique_fac := fun {W} q hq ‚Ü¶
    let s := ‚ü®W, .mk q‚ü©
    .intro (h.lift s) (h.fac s) (h.uniq s)

def Lim.toCone (l: Lim M) : Limits.Cone M where
  pt := l.pt
  œÄ := {
    app := l.œÄ
    naturality := fun _ i' œÜ ‚Ü¶ Category.id_comp (l.œÄ i') |>.trans <| l.natl œÜ
  }

noncomputable
def Lim.toCone_isLimit (l: Lim M) : Limits.IsLimit l.toCone := .ofExistsUnique fun s ‚Ü¶
  l.unique_fac s.œÄ.app (fun œÜ ‚Ü¶ s.w œÜ |>.symm)

noncomputable
def Lim.isoIsLimit : Lim M ‚âÖ (c: Limits.Cone M) √ó Limits.IsLimit c where
  hom l := ‚ü®l.toCone, l.toCone_isLimit‚ü©
  inv | ‚ü®_, hc‚ü© => .ofIsLimit hc
  hom_inv_id := rfl
  -- inv_hom_id := by aesop_cat -- uses uniqueness :/

end LimConeIso
end Lim
-- now that I'm convinced of the cone definition, time to start using it
open Limits

section InfProduct
variable {Œ±} [CompleteLattice Œ±] (X: Œπ ‚Üí Œ±)

def infCone : Cone (Discrete.functor X) where
  pt := ‚®Öi, X i
  œÄ := .mk fun ‚ü®i‚ü© ‚Ü¶ ‚ü®‚ü®iInf_le X i‚ü©‚ü©

example : IsLimit (infCone X) where
  lift s := ‚ü®‚ü®le_iInf fun i ‚Ü¶ s.œÄ.app ‚ü®i‚ü© |>.down.down‚ü©‚ü©
  fac _ _ := rfl
  uniq _ _ _ := rfl
end InfProduct

example [Category I] [Category C] {F: I ‚•§ C} (s: Cone F) : Subsingleton (IsLimit s) where
  allEq h‚ÇÅ h‚ÇÇ := IsLimit.mk.injEq _ _ _ _ _ _ |>.mpr <|
    funext fun x ‚Ü¶ h‚ÇÇ.uniq x (h‚ÇÅ.lift x) (h‚ÇÅ.fac x)

example [Category C] (x: C) : IsTerminal x ‚âÉ ‚àÄy, Unique (y ‚ü∂ x) where
  toFun | ‚ü®lift, _, uniq‚ü©, y => {
    default := lift <| asEmptyCone y
    uniq := (uniq (asEmptyCone y) ¬∑ (¬∑.as.elim))
  }
  invFun h := {
    lift := fun ‚ü®y, _‚ü© ‚Ü¶ h y |>.default
    fac := fun _ ‚Ü¶ (¬∑.as.elim)
    uniq := fun s f _ ‚Ü¶ h s.pt |>.uniq f
  }
  left_inv h := @Subsingleton.elim _ _ _ h
  right_inv _ := rfl

section MyProd
variable {C J} [Category C]

structure MyProd1 (F: J ‚Üí C) where
  pt: C
  homEquiv {X}: (X ‚ü∂ pt) ‚âÉ (‚àÄj, X ‚ü∂ F j)
  homEquiv_comp {X Y: C} (f: X ‚ü∂ Y) (g: Y ‚ü∂ pt): ‚àÄj, homEquiv (g ‚äö f) j = (homEquiv g j) ‚äö f

namespace MyProd1
def ex_RR : MyProd1 (Bool.rec ‚Ñù ‚Ñù) where
  pt := ‚Ñù √ó ‚Ñù
  homEquiv := {
    toFun f j a := j.recOn (f a).fst (f a).snd
    invFun f a := (f false a, f true a)
    left_inv _ := rfl
    right_inv _ := funext <| Bool.rec rfl rfl
  }
  homEquiv_comp _ _ _ := rfl

variable {F: J ‚Üí C} (p: MyProd1 F)

example : (Discrete.functor F).cones |>.RepresentableBy p.pt where
  homEquiv {X} := {
    toFun f := {
      app j := p.homEquiv f j.as
      naturality | ‚ü®i‚ü©, ‚ü®j‚ü©, ‚ü®‚ü®(h: i = j)‚ü©‚ü© => h ‚ñ∏
        (Category.id_comp (p.homEquiv f i) |>.trans <| Category.comp_id _ |>.symm)
    }
    invFun f := p.homEquiv.symm fun j ‚Ü¶ f.app ‚ü®j‚ü©
    left_inv := p.homEquiv.symm.apply_symm_apply
    right_inv _ := NatTrans.ext <| funext fun j ‚Ü¶ congrFun (p.homEquiv.apply_symm_apply _) j.as
  }
  homEquiv_comp {X Y} f g := NatTrans.ext <| funext fun ‚ü®j‚ü© ‚Ü¶ p.homEquiv_comp f g j

theorem homEquiv_eq {f: X ‚ü∂ p.pt} : p.homEquiv f j = p.homEquiv (ùüô p.pt) j ‚äö f :=
  congrArg (p.homEquiv ¬∑ j) (Category.comp_id f) |>.symm.trans <| p.homEquiv_comp f (ùüô _) j

def fan : Fan F := .mk p.pt <| p.homEquiv (ùüô p.pt)

def lim : IsLimit p.fan := mkFanLimit p.fan
  (fun s ‚Ü¶ p.homEquiv |>.symm fun j ‚Ü¶ s.œÄ.app ‚ü®j‚ü©)
  (fun s j ‚Ü¶ p.homEquiv_eq.symm.substr <| congrFun (p.homEquiv.apply_symm_apply s.proj) j)
  (fun s _ h ‚Ü¶ p.homEquiv.injective <| funext fun j ‚Ü¶
    p.homEquiv.apply_symm_apply s.proj |>.substr <| p.homEquiv_eq.trans (h j))

end MyProd1

structure MyProd2 (F: J ‚Üí C) where
  pt: C
  homIso : (Functor.const (Discrete J)).op ‚ãô yoneda.obj (Discrete.functor F) |>.RepresentableBy pt
namespace MyProd2

example : MyProd2 (Bool.rec ‚Ñù ‚Ñù) where
  pt := ‚Ñù √ó ‚Ñù
  homIso := {
    homEquiv := {
      toFun f := {
        app b x := by dsimp; exact b.as.recOn (f x).1 (f x).2
        naturality | ‚ü®i‚ü©, ‚ü®j‚ü©, ‚ü®‚ü®(f: i = j)‚ü©‚ü© => funext fun x ‚Ü¶ by subst f; exact rfl
      }
      invFun s x := (s.app ‚ü®false‚ü© x, s.app ‚ü®true‚ü© x)
      left_inv _ := rfl
      right_inv _ := NatTrans.ext <| funext fun b ‚Ü¶ by rcases b with ‚ü®‚ü®‚ü©‚ü© <;> exact rfl
    }
    homEquiv_comp _ _ := rfl
  }
end MyProd2
end MyProd

variable {C J} [Category C] [Category J] (F: J ‚•§ C)

-- `Cone.equiv`
example : Cone F ‚âÖ (c: C·µí·µñ) √ó F.cones.obj c where
  hom s := ‚ü®‚ü®s.pt‚ü©, s.œÄ‚ü©
  inv | ‚ü®‚ü®c‚ü©, œÄ‚ü© => ‚ü®c, œÄ‚ü©
  hom_inv_id := rfl
  inv_hom_id := rfl

example [Category J] (F: J ‚•§ C) : HasLimit F ‚Üî F.cones.IsRepresentable where
  mp | ‚ü®s, hs‚ü© => ‚ü®s.pt, ‚ü®@fun c ‚Ü¶ {
    toFun f := {
      app j := s.œÄ.app j ‚äö f
      naturality {i j} g := calc
        _ = s.œÄ.app j ‚äö f := Category.id_comp _
        _ = (F.map g ‚äö s.œÄ.app i) ‚äö f := congrArg _ <| s.w g |>.symm
        _ = _ := Category.assoc f _ _ |>.symm
    }
    invFun t := hs.lift ‚ü®c, t‚ü©
    left_inv f := .symm <| hs.uniq ‚ü®c, _‚ü© f fun _ ‚Ü¶ rfl
    right_inv t := .symm <| t.ext <| funext fun j ‚Ü¶ .symm <| hs.fac ‚ü®c, t‚ü© j
  }, fun _ _ ‚Ü¶ NatTrans.ext <| funext fun _ ‚Ü¶ Category.assoc ..‚ü©‚ü©
  mpr | ‚ü®c, ‚ü®t‚ü©‚ü© => .mk {
    cone := ‚ü®c, t.homEquiv <| ùüô c‚ü©
    isLimit := {
      lift s := t.homEquiv.symm s.œÄ
      fac s j := (NatTrans.congr_app ¬∑.symm j) <|
        t.homEquiv.apply_symm_apply _ |>.symm.trans <| t.homEquiv_eq (t.homEquiv.symm s.œÄ)
      uniq _ f h := t.homEquiv.eq_symm_apply.mpr <| NatTrans.ext <| funext fun j ‚Ü¶
        t.homEquiv_eq f |>.substr <| h j
    }
  }

example : HasTerminal C ‚Üî ((Functor.const C·µí·µñ).obj Unit).IsRepresentable where
  mp _ := .mk <| .intro (‚ä§_ C) <| .intro {
    homEquiv := {
      toFun _ := ()
      invFun | () => terminalIsTerminal.from ..
      left_inv _ := terminalIsTerminal.hom_ext ..
      right_inv _ := rfl
    }
    homEquiv_comp _ _ := rfl
  }
  mpr | ‚ü®_, ‚ü®hc‚ü©‚ü© => IsTerminal.hasTerminal <| .ofUniqueHom (fun _ ‚Ü¶ hc.homEquiv.symm ())
                                                           fun _ _ ‚Ü¶ hc.homEquiv.injective rfl

namespace TopSubspaceEqualizer
open TopCat
variable (X: TopCat)

def X't := Bool
instance : TopologicalSpace X't := ‚ä§

def X': TopCat := of X't

abbrev f‚ÇÅ : X ‚ü∂ X' := ofHom <| .const _ true
variable {X} (A: Set X)

noncomputable
abbrev f‚ÇÇ : X ‚ü∂ X' := ofHom ‚ü®A.boolIndicator, continuous_top‚ü©

noncomputable
def forkA : Fork (f‚ÇÅ X) (f‚ÇÇ A) := .ofŒπ (P := of A) (ofHom ‚ü®_, continuous_subtype_val‚ü©) <|
  ext fun x ‚Ü¶ A.mem_iff_boolIndicator x |>.mp x.prop |>.symm

theorem fork_pt_mem {A} (S: Fork (f‚ÇÅ X) (f‚ÇÇ A)) (s: S.pt): S.Œπ.hom s ‚àà A :=
  A.mem_iff_boolIndicator _ |>.mpr <| .symm <| TopCat.ext_iff.mp S.condition s

noncomputable
example : IsLimit (forkA A) where
  lift (S: Fork _ _) := ofHom ‚ü®A.codRestrict _ <| fork_pt_mem S, S.Œπ.hom.continuous.codRestrict _‚ü©
  fac
  | _, .zero => rfl
  | S, .one => Fork.app_one_eq_Œπ_comp_left S ‚ñ∏ rfl
  uniq (S: Fork _ _) f h := ext fun _ ‚Ü¶ Subtype.ext <|
    have : S.Œπ = (ofHom ‚ü®_, continuous_subtype_val‚ü© ‚äö f) := h .zero |>.symm
    Set.val_codRestrict_apply .. |>.symm.subst <| this.substr rfl

end TopSubspaceEqualizer

namespace CoproductsType
variable {Œπ} (F: Œπ ‚Üí Type _)

def sumCone : Cocone (Discrete.functor F) where
  pt := Œ£i, F i
  Œπ := Discrete.natTrans fun i ‚Ü¶ .mk i.as

example : IsColimit (sumCone F) where
  desc s x := s.Œπ.app ‚ü®x.1‚ü© x.2
  fac _ _ := funext fun _ ‚Ü¶ rfl
  uniq _ _ h := funext fun x ‚Ü¶ h ‚ü®x.1‚ü© ‚ñ∏ rfl

end CoproductsType
