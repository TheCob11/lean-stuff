import Mathlib

-- example [PseudoMetricSpace A] (s: ‚Ñï ‚Üí A) (a: A):
--   (‚àÄŒµ > 0, ‚àÉN, ‚àÄn ‚â• N, dist (s n) a < Œµ) ‚Üî
--   ‚àÄA, a ‚àà A ‚àß IsOpen A ‚Üí ‚àÉN, ‚àÄn ‚â• N, s n ‚àà A where
--   mp h _ := fun ‚ü®a_mem, A_open‚ü© ‚Ü¶
--     have ‚ü®Œµ, ‚ü®Œµ_pos, hŒµ‚ü©‚ü© := Metric.isOpen_iff.mp A_open a a_mem
--     h Œµ Œµ_pos |>.imp fun _N hN n a ‚Ü¶ hŒµ (hN n a)
--   mpr h _Œµ Œµ_pos := h _ ‚ü®Metric.mem_ball_self Œµ_pos, Metric.isOpen_ball‚ü©

-- example [PseudoMetricSpace Œ±] (s: ‚Ñï ‚Üí Œ±) (a: Œ±):
--   (‚àÄŒµ > 0, ‚àÄ·∂† n in .atTop, dist (s n) a < Œµ) ‚Üî
--   ‚àÄA, a ‚àà A ‚Üí IsOpen A ‚Üí ‚àÄ·∂† n in .atTop, (s n) ‚àà A where
--   mp h _ a_mem A_open :=
--     have ‚ü®Œµ, ‚ü®Œµ_pos, hŒµ‚ü©‚ü© := Metric.isOpen_iff.mp A_open a a_mem
--     h Œµ Œµ_pos |>.mono fun _n hn ‚Ü¶ hŒµ hn
--   mpr h _ Œµ_pos := h _ (Metric.mem_ball_self Œµ_pos) Metric.isOpen_ball

-- example [TopologicalSpace Œ±] (s: ‚Ñï ‚Üí Œ±) (a: Œ±): Filter.Tendsto s .atTop (nhds a) ‚Üî
--   ‚àÄA, a ‚àà A ‚Üí IsOpen A ‚Üí ‚àÄ·∂† n in .atTop, (s n) ‚àà A where
--   mp h A a_mem A_open := by

--     sorry
--   mpr h := sorry

-- example : Filter.atTop.Tendsto (fun n ‚Ü¶ (1 / 2 ^ n : ‚Ñù)) (nhds 0) :=
--   Metric.tendsto_atTop'.mpr fun Œµ (hŒµ: 0 < Œµ) ‚Ü¶
--   let a (n: ‚Ñï) : ‚Ñù := (2 ^ n)‚Åª¬π
--   if one_le_Œµ: 1 ‚â§ Œµ then by
--     let N := ‚åäReal.logb 2 Œµ‚åã‚Çä
--     refine Exists.intro N fun n (hn: N < n) ‚Ü¶ ?_
--     simp only [one_div, dist_zero_right, norm_inv, norm_pow, RCLike.norm_ofNat]
--     let NR : ‚Ñù := N
--     let nR : ‚Ñù := n
--     have : (2: ‚Ñù) ^ NR ‚â§ 2 ^ nR :=
--       Real.monotone_rpow_of_base_ge_one one_le_two <| Nat.mono_cast hn.le
--     have : 2 ^ NR < Œµ := by
--       -- simp_all only [Real.rpow_natCast, N, NR, nR]
--       -- have := Real.floor_logb_natCast one_lt_two hŒµ.le
--       -- simp only [Nat.cast_ofNat] at this
--       -- have : ‚åäReal.logb 2 Œµ‚åã
--       -- simp [NR]
--       have : (2: ‚Ñù) ^ NR = (2 ^ N : ‚Ñ§) := Real.rpow_natCast 2 N |>.trans <|
--         @Int.cast_pow ‚Ñù _ 2 N |>.symm
--       rw [this]
--       simp [N]
--       have :=
--         (Int.ofNat_floor_eq_floor <| Real.logb_nonneg one_lt_two one_le_Œµ).trans
--         <| Real.floor_logb_natCast one_lt_two hŒµ.le
--       simp [‚Üê zpow_natCast, this]
--       -- have : (2: ‚Ñù) ^ Int.log 2 Œµ = (((2) ^ (Int.log 2 Œµ) : ‚Ñ§): ‚Ñù) := rfl
--       -- rw?
--       sorry
--     sorry
--   else
--     have Œµ_le_one : Œµ < 1 := lt_of_not_le one_le_Œµ; clear% one_le_Œµ
--     sorry

-- section

-- open Topology
-- example : Continuous fun p: ‚Ñù √ó ‚Ñù ‚Ü¶ p.1 * p.2 := Metric.continuous_iff.mpr fun (x, y) Œµ Œµ_pos ‚Ü¶ by
--   let k := x^2 ‚äî y^2 + 2
--   have k_pos : 0 < k := add_pos_of_nonneg_of_pos (sq_nonneg x |>.trans le_sup_left) two_pos
--   let Œ¥ := Œµ / k
--   have Œ¥_pos : Œ¥ > 0 := div_pos Œµ_pos k_pos
--   refine ‚ü®Œ¥, Œ¥_pos, fun (a, b) h ‚Ü¶ ?_‚ü©
--   let d2 := dist (a, b) (x, y)
--   if hd2_zero: 0 = d2 then sorry else
--   have d2_pos : 0 < d2 := dist_nonneg.lt_of_ne hd2_zero
--   change dist (a * b) (x * y) < Œµ
--   have : d2 * k < Œµ := lt_div_iff k_pos |>.mp h
--   have : d2 * (x^2 ‚äî y^2) + d2 * 2 < Œµ := left_distrib d2 _ 2 |>.symm.trans_lt this
--   have : d2 * (x^2 ‚äî y^2) < Œµ := lt_add_iff_pos_right _ |>.mpr
--     (mul_pos d2_pos two_pos) |>.trans this
--   have := calc
--     dist (a*b) (x*y) = dist (x*y) (a*b) := dist_comm ..
--     _ ‚â§ dist (x*y) (a*y) + dist (a*y) (a*b) := dist_triangle ..
--     _ = |x*y - a*y| + |a*y - a*b| := rfl
--     _ = |(x-a)*y| + |a*(y-b)| := by rw [‚Üê mul_sub, ‚Üê sub_mul]
--     _ = dist x a * |y| + |a| * dist y b := by rw [abs_mul _ y, abs_mul a _]; exact rfl

--   let Œ¥x := (Œµ/2) / (|y| + 1)
--   -- want Œ¥y to be something like (Œµ/2) / (|a| + 1)
--   -- thus Œ¥ would be the ‚äî of those = (Œµ/2) * (1/(|y|+1) ‚äî 1/(|a|+1))
--   -- but i alr set |x-a| < (Œµ/2)/(|y|+1)
--   -- Œµ/2 > (|y|+1)|x-a|
--   -- = |(|y|+1)(x-a)|
--   -- = |(|y|+1)x - (|y|+1)a|
--   -- = dist (|y|+1)x (|y|+1)a
--   -- ‚â§ dist (|y|+1)x (|y|+1)  + dist (|y|+1) (|y|+1)a

--   -- Œµ/2 > (|y|+1)|x-a|
--   -- ‚â• (|y|+1)(|x| - |a|)
--   -- = (|y|+1)|x| - (|y|+1)|a|
--   sorry

-- end

section
open Topology Metric
variable {X Y} [TopologicalSpace X] [Inhabited X] [MetricSpace Y]
         {F} [FunLike F X Y] [BoundedContinuousMapClass F X Y]

theorem bddAbove_dist {f g : F} : BddAbove <| Set.range (fun x ‚Ü¶ dist (f x) (g x)) :=
  let x‚ÇÄ := default
  let ‚ü®cf, hcf‚ü© := map_bounded f
  let f‚ÇÄ := f x‚ÇÄ
  let ‚ü®cg, hcg‚ü© := map_bounded g
  let g‚ÇÄ := g x‚ÇÄ
  ‚ü®cf + dist f‚ÇÄ g‚ÇÄ + cg, fun _ ‚ü®x, hx‚ü© ‚Ü¶ hx ‚ñ∏
      (dist_triangle4 (f x) f‚ÇÄ g‚ÇÄ (g x) |>.trans <| add_le_add_three (hcf x x‚ÇÄ) le_rfl (hcg x‚ÇÄ x))‚ü©

noncomputable local instance : MetricSpace F where
  dist f g := ‚®Üx, dist (f x) (g x)
  dist_self f := iSup_congr (dist_self ‚àò' f) |>.trans ciSup_const
  dist_comm f g := iSup_congr fun x ‚Ü¶ dist_comm (f x) (g x)
  dist_triangle f g h := ciSup_le fun x ‚Ü¶ dist_triangle (f x) (g x) (h x) |>.trans <|
    add_le_add (le_ciSup bddAbove_dist x) (le_ciSup bddAbove_dist x)
  eq_of_dist_eq_zero h := DFunLike.ext _ _ fun x ‚Ü¶ dist_le_zero.mp <| h ‚ñ∏ le_ciSup bddAbove_dist x

section
variable {Œπ} {f: Œπ ‚Üí F} {g: F} {p: Filter Œπ}
example : p.Tendsto f (ùìù g) ‚Üî TendstoUniformly ((‚áë) ‚àò f) g p := calc
  _ ‚Üî ‚àÄŒµ > 0, ‚àÄ·∂†i in p, dist (f i) g < Œµ := tendsto_nhds
  _ ‚Üî ‚àÄŒµ > 0, ‚àÄ·∂†i in p, ‚àÄx, dist (f i x) (g x) < Œµ := {
    mp h Œµ Œµ_pos := h Œµ Œµ_pos |>.mono fun i hi x ‚Ü¶ le_ciSup bddAbove_dist x |>.trans_lt hi
    mpr h Œµ Œµ_pos := h (Œµ/2) (half_pos Œµ_pos) |>.mono fun i hi ‚Ü¶
      ciSup_le (le_of_lt ‚àò' hi) |>.trans_lt <| half_lt_self Œµ_pos
  }
  _ ‚Üî ‚àÄŒµ > 0, ‚àÄ·∂†i in p, ‚àÄx, dist (g x) (f i x) < Œµ := by conv in _ < _ => rw [dist_comm]
  _ ‚Üî _ := tendstoUniformly_iff.symm

example (h: p.Tendsto f (ùìù g)) x : p.Tendsto (f ¬∑ x) (ùìù (g x)) := tendsto_nhds.mpr fun Œµ Œµ_pos ‚Ü¶
  tendsto_nhds.mp h Œµ Œµ_pos |>.mono fun _i hi ‚Ü¶ le_ciSup bddAbove_dist x |>.trans_lt hi
end

namespace PointwiseVsUniformConvergence1
open unitInterval BoundedContinuousFunction

def f: ‚Ñï ‚Üí I ‚Üí·µá I := fun n ‚Ü¶ .mkOfCompact {
  toFun t := t^n
  continuous_toFun := Continuous.pow continuous_induced_dom n |>.subtype_mk _
}

theorem f_n_one {n} : (f n) 1 = 1 := one_pow n

noncomputable def flim: I ‚Üí I := Function.update 0 1 1

theorem flim_one : flim 1 = 1 := Function.update_self 1 1 0
theorem flim_ne_one {t} (ht: t ‚â† 1) : flim t = 0 := Function.update_of_ne ht 1 0

theorem f_pointwise_tendsto (t) : Filter.atTop.Tendsto (f ¬∑ t) (ùìù (flim t)) :=
  if ht: t = 1 then ht ‚ñ∏ Metric.tendsto_nhds.mpr fun _Œµ Œµ_pos ‚Ü¶ .of_forall fun _ ‚Ü¶
    flim_one.substr <| f_n_one.substr <| dist_self 1 |>.trans_lt Œµ_pos
  else tendsto_subtype_rng.mpr <| flim_ne_one ht |>.substr <|
    tendsto_pow_atTop_nhds_zero_of_lt_one t.prop.1 <| le_one'.lt_of_ne ht

theorem tendsto_flim_one : (ùìù[‚â†] 1).Tendsto flim (ùìù 0) := Metric.tendsto_nhdsWithin_nhds.mpr
  fun _Œµ Œµ_pos ‚Ü¶
    ‚ü®1, one_pos, fun _t ht _ ‚Ü¶ flim_ne_one ht |>.substr <| dist_self 0 |>.trans_lt Œµ_pos‚ü©

theorem not_continuousAt_flim_one : ¬¨ContinuousAt flim 1 := not_continuousAt_of_tendsto
  tendsto_flim_one
  inf_le_left
  (disjoint_nhds_nhds.mpr <| flim_one.trans_ne one_ne_zero)

end PointwiseVsUniformConvergence1

end
