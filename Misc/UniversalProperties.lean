import Mathlib
open CategoryTheory Limits MonoidalCategory
local notation f " ‚äö " g => CategoryStruct.comp g f

variable {C} [Category C] {c x y : C}

class IsUniversal (c: C) (F: C·µí·µñ ‚•§ Type) where
  pt: F.obj ‚ü®c‚ü©
  [prop: IsIso <| yonedaEquiv.symm pt]

namespace IsUniversal
instance [h: IsUniversal c F] : IsIso (yonedaEquiv.symm h.pt) := h.prop

noncomputable def repr [h: IsUniversal c F] : F.RepresentableBy c :=
  Functor.representableByEquiv.symm <| asIso <| yonedaEquiv.symm h.pt

noncomputable example : Nonempty (IsUniversal c F) ‚Üî Nonempty (F.RepresentableBy c) where
  mp | ‚ü®h‚ü© => .intro h.repr
  mpr | ‚ü®h‚ü© => .intro {
    pt := h.homEquiv (ùüô c)
    prop := ‚ü®{
      app _ p := h.homEquiv.symm p
      naturality _ _ f := funext fun p ‚Ü¶ h.comp_homEquiv_symm p f.unop |>.symm
    },
      NatTrans.ext <| funext‚ÇÇ fun _ f ‚Ü¶ h.homEquiv.symm_apply_eq.mpr <| h.homEquiv_eq f |>.symm,
      NatTrans.ext <| funext‚ÇÇ fun _ f ‚Ü¶ h.homEquiv_eq _ |>.symm.trans <| h.homEquiv.right_inv f‚ü©
  }

noncomputable
example [HasBinaryProduct x y] : IsUniversal (x ‚®Ø y) (yoneda.obj x ‚äó yoneda.obj y) where
  pt := (prod.fst, prod.snd)
  prop := .mk ‚ü®{
      app | _, (f, g) => prod.lift f g
      naturality _ _ _ := funext fun (_, _) ‚Ü¶ prod.comp_lift .. |>.symm
    },
    NatTrans.ext <| funext‚ÇÇ fun _ f ‚Ü¶ calc prod.lift (prod.fst ‚äö f) (prod.snd ‚äö f)
      _ = prod.lift (prod.fst) (prod.snd) ‚äö f := prod.comp_lift .. |>.symm
      _ = ùüô _ ‚äö f := congrArg _ prod.lift_fst_snd
      _ = f := Category.comp_id f
    , NatTrans.ext <| funext‚ÇÇ fun _ (f, g) ‚Ü¶ Prod.ext (prod.lift_fst f g) (prod.lift_snd f g)‚ü©

example [Category J] (F: J ‚•§ C) : HasLimit F ‚Üî ‚àÉc, Nonempty (IsUniversal c F.cones) where
  mp | ‚ü®s, hs‚ü© => .intro s.pt <| .intro {
    pt := s.œÄ
    prop := .mk <| ‚ü®{
      app x œÄ := hs.lift ‚ü®x.unop, œÄ‚ü©
      naturality x y f := funext fun œÄ ‚Ü¶ by
        dsimp
        refine hs.hom_ext ?_
        sorry
    }, sorry, sorry‚ü©
  }
  mpr := sorry

noncomputable
example [Category J] (F: J ‚•§ C) (s: Cone F) : IsLimit s ‚âÉ IsUniversal s.pt F.cones where
  toFun hs := {
    pt := s.œÄ
    prop := .mk ‚ü®{
      app x œÄ := hs.lift ‚ü®x.unop, œÄ‚ü©
      naturality x y f := funext fun œÄ ‚Ü¶ hs.hom_ext fun j ‚Ü¶ calc
        _ = œÄ.app j ‚äö f.unop := hs.fac ‚ü®y.unop, œÄ ‚äö _‚ü© j
        _ = (s.œÄ.app j ‚äö hs.lift ‚ü®x.unop, œÄ‚ü©) ‚äö f.unop := congrArg _ <| hs.fac ‚ü®x.unop, œÄ‚ü© j |>.symm
        _ = _ := Category.assoc .. |>.symm
    }, NatTrans.ext <| funext‚ÇÇ fun _ f ‚Ü¶ hs.hom_lift _ |>.symm,
       NatTrans.ext <| funext‚ÇÇ fun _ f ‚Ü¶ NatTrans.ext <| funext fun j ‚Ü¶ hs.fac ‚ü®_, f‚ü© j‚ü©
  }
  invFun h := {
    lift t := inv (yonedaEquiv.symm h.pt) |>.app ‚ü®t.pt‚ü© t.œÄ
    fac t j := by
      simp [yonedaEquiv]
      have := yonedaEquiv.symm h.pt |>.app ‚ü®s.pt‚ü©

      sorry
    uniq := sorry
  }
  -- invFun h := Limits.equiv sorry
  left_inv := sorry
  right_inv := sorry
